
openapi: 3.0.0
info:
  title: Recipes api
  description: API for recipes project
  version: 1.0.1

servers:
  - url: "http://127.0.0.1:3000"
    description: Local server

tags:
  - name: Auth
    description: All authentication related routes
  - name: Users
    description: All the user's personal app info
  - name: Recipes
    description: All recipes general info

paths:
  /register:
    post:
      tags:
        - Auth
      summary: A new user from the client is added to the server
      description: A JSON object contains all the details about the new user.
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters

  /login:
    post:
      tags:
        - Auth
      summary: Login an exist user
      description: An exist user login to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginScheme"
        required: true
      responses:
        "200":
          description: |
            User was found in the DB and authenitcated successfully. The session ID is returned in a cookie named `session`.  You should include this cookie in subsequent requests
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        "401":
          description: Authentication failed

  /logout:
    post:
      tags:
        - Auth
      summary: logout a user from the system
      responses:
        "200":
          description: the user has been successfully logged out

  /users/favorites:
    get:
      tags:
        - Users
      summary: Return the favorite recipes saved by user
      responses:
        "200":
          description: list of favorite recipes
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []
    post:
      tags:
        - Users
      summary: Save a recipe as favorite
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: integer
      responses:
        "200":
          description: Recipe successfully saved
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

  /users/user-details:
    get:
      tags:
        - Users
      summary: Get user details
      responses:
        "200":
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

  /users/favorites/{recipeId}:
    delete:
      tags:
        - Users
      summary: Remove a recipe from the user's favorites
      parameters:
        - in: path
          name: recipeId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Recipe removed from favorites
        "404":
          description: Recipe not found in favorites
        "401":
          description: User not logged in
      security:
        - bearerAuth: []

  /users/family:
    get:
      tags:
        - Users
      summary: Get family recipes
      responses:
        "200":
          description: List of family recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeList'

  /users/myRecipes:
    get:
      tags:
        - Users
      summary: Get all user-created recipes
      responses:
        "200":
          description: List of personal recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeList'

    post:
      tags:
        - Users
      summary: Create a new personal or family recipe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRecipeRequest'
      responses:
        "201":
          description: Recipe created successfully
        "400":
          description: Invalid input
        "401":
          description: User not authenticated
      security:
        - bearerAuth: []

  /users/myRecipes/{recipeId}:
    delete:
      tags:
        - Users
      summary: Delete a recipe created by the logged-in user
      description: |
        Deletes a recipe from the system, only if the logged-in user is its creator.
        Requires user authentication via bearer token.
      parameters:
        - in: path
          name: recipeId
          required: true
          description: ID of the recipe to delete
          schema:
            type: integer
      responses:
        "200":
          description: Recipe deleted successfully
        "401":
          description: User not logged in
        "403":
          description: User is not authorized to delete this recipe
        "404":
          description: Recipe not found
      security:
        - bearerAuth: []



  /users/last-watched:
    get:
      tags:
        - Users
      summary: Get last watched recipes
      responses:
        "200":
          description: Last 3 watched recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeList'
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []


  /recipes/show-recipe/{recipeId}:
    get:
      tags:
        - Recipes
      summary: Get full recipe details
      parameters:
        - name: recipeId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Recipe details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreview'
        "404":
          description: Recipe not found

  /recipes/random:
    get:
      tags:
        - Recipes
      summary: Get random recipes
      responses:
        "200":
          description: List of random recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeList'

  /recipes/like/{id}:
    post:
      tags:
        - Recipes
      summary: Like a recipe
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Recipe liked
        "401":
          description: Unauthorized
        "300":
          description: Recipe already liked
      security:
        - bearerAuth: []
    delete:
      tags:
        - Recipes
      summary: Unlike a recipe
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Recipe unliked
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

  /recipes/search:
    get:
      tags:
        - Recipes
      summary: Search for recipes by name with optional filters
      description: Returns a list of recipes matching the search query and optional filters.
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
          description: The search term to query recipes by.
        - name: number
          in: query
          required: false
          schema:
            type: integer
            default: 5
          description: The number of results to return (default 5).
        - name: cuisine
          in: query
          required: false
          schema:
            type: string
          description: Filter by cuisine type (e.g., "italian", "mexican").
        - name: diet
          in: query
          required: false
          schema:
            type: string
          description: Filter by diet type (e.g., "ketogenic", "paleo", "vegetarian").
        - name: intolerances
          in: query
          required: false
          schema:
            type: string
          description: Comma-separated list of intolerances (e.g., "egg,peanut,gluten").
      responses:
        '200':
          description: A list of recipe results
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
                    image:
                      type: string
        '400':
          description: Bad request (e.g., missing query)
        '500':
          description: Internal server error (e.g., Spoonacular API failure)

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins between 3 to 8 letters only
          example: my_name
        firstname:
          type: string
          description: user's first name
          example: my_first_name
        lastname:
          type: string
          description: user's last name
          example: my_last_name
        country:
          type: string
          description: user's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description:
            password conatins between 5 to 10 chars, at least one of them
            is a number and a special char
          format: password
          example: my_name@12
        email:
          pattern: email
          type: string
          description: user's email
          example: my_name12@gmail.com
        # image-url:
        #   pattern: URL
        #   type: string
        #   description: URL for the user's image
        #   example: https://cloudinary.com/
      description: Model containing user info
    LoginScheme:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins letters only
        password:
          maxLength: 10
          minLength: 5
          description: password conatins at least one number and one special char
          format: password
      example:
        username: my_name
        password: my_name@12
    NewRecipeRequest:
      type: object
      required:
        - title
        - photo
        - preparation_time
        - groceries_list
        - preparation_instructions
      properties:
        title:
          type: string
          example: "My favorite shakshuka"
        photo:
          type: string
          format: uri
          example: "https://example.com/photo.jpg"
        preparation_time:
          type: integer
          example: 20
        groceries_list:
          type: string
          example: "Eggs, Tomatoes, Onion, Olive oil"
        preparation_instructions:
          type: string
          example: "1. Heat oil\n2. Fry onion\n3. Add tomatoes..."
        isVegan:
          type: boolean
          example: false
        isVegetarian:
          type: boolean
          example: true
        isGlutenFree:
          type: boolean
          example: true

    RecipePreview:
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false

    RecipeList:
      type: object
      properties:
        recipes:
          type: array
          items:
            $ref: '#/components/schemas/RecipePreview'
        totalResults:
          type: integer
          description: Total number of recipes found
          example: 100
          